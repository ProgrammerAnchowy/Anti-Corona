// <auto-generated />
using System;
using Anti_Corona.Data.Concrete.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Anti_Corona.Data.Migrations
{
    [DbContext(typeof(AntiCoronaContext))]
    partial class AntiCoronaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Anti_Corona.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ImageUrl = "maske.jpg",
                            Name = "Maskeler"
                        },
                        new
                        {
                            CategoryId = 2,
                            ImageUrl = "eldiven.jpg",
                            Name = "Eldivenler"
                        },
                        new
                        {
                            CategoryId = 3,
                            ImageUrl = "dezenfektan.jpg",
                            Name = "Dezenfektanlar"
                        },
                        new
                        {
                            CategoryId = 4,
                            ImageUrl = "siperlik.jpg",
                            Name = "Siperlikler"
                        });
                });

            modelBuilder.Entity("Anti_Corona.Entity.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Description = "Güzel maske",
                            ProductId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            Description = "Güzel maske1",
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Anti_Corona.Entity.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageUrl = "maskeUrun1.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 2,
                            ImageUrl = "maskeUrun2.jpg",
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Anti_Corona.Entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHomePage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Date = new DateTime(2020, 12, 27, 13, 30, 50, 0, DateTimeKind.Unspecified),
                            Description = "Güzel maske",
                            IsHomePage = true,
                            IsOnSale = true,
                            Price = 100.0,
                            Stock = 100,
                            Title = "Maske"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Date = new DateTime(2020, 12, 26, 12, 30, 50, 0, DateTimeKind.Unspecified),
                            Description = "Güzel maske1",
                            IsHomePage = true,
                            IsOnSale = true,
                            Price = 200.0,
                            Stock = 200,
                            Title = "Maske1"
                        });
                });

            modelBuilder.Entity("Anti_Corona.Entity.Comment", b =>
                {
                    b.HasOne("Anti_Corona.Entity.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Anti_Corona.Entity.Image", b =>
                {
                    b.HasOne("Anti_Corona.Entity.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Anti_Corona.Entity.Product", b =>
                {
                    b.HasOne("Anti_Corona.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
